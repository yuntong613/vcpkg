# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: MIT
#

jobs:
- job: ${{ parameters.jobName }}
  pool:
    name: ${{ parameters.poolName }}
  workspace:
    clean: resources
  timeoutInMinutes: 1440 # 1 day

  steps:
  - task: PowerShell@2
    displayName: 'Initialize Environment'
    inputs:
      filePath: 'scripts/azure-pipelines/windows/initialize-environment.ps1'
    # Note: D: is the Azure machines' temporary disk.
  - task: CmdLine@2
    displayName: 'Build vcpkg'
    inputs:
      script: |
        set VCPKG_DOWNLOADS=D:\downloads
        .\bootstrap-vcpkg.bat
  - task: CmdLine@2
    displayName: "Build vcpkg with CMake and Run Tests"
    condition: eq('${{ parameters.triplet }}', 'x86-windows')
    inputs:
      script: |
        :: TRANSITION, get these tools on the VMs next time we roll them
        set VCPKG_DOWNLOADS=D:\downloads
        .\vcpkg.exe fetch cmake
        .\vcpkg.exe fetch ninja
        set PATH=D:\downloads\tools\cmake-3.17.2-windows\cmake-3.17.2-win32-x86\bin;D:\downloads\tools\ninja-1.10.0-windows;%PATH%
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x86 -host_arch=x86
        rmdir /s /q build.x86.debug > nul 2> nul
        cmake.exe -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=ON -B build.x86.debug -S toolsrc
        ninja.exe -C build.x86.debug
        build.x86.debug\vcpkg-test.exe
      failOnStderr: true
  - powershell: |
      $env:VCPKG_DOWNLOADS='D:\downloads'
      $commonArgs = @(
        '--binarycaching',
        '--x-binarysource=clear;files,W:\,upload',
        '--x-buildtrees-root=D:\buildtrees',
        '--x-install-root=D:\install',
        '--x-packages-root=D:\packages'
      )

      .\vcpkg.exe x-ci-clean @commonArgs
      $skipList = ./scripts/azure-pipelines/generate-skip-list.ps1 -Triplet "${{ parameters.triplet }}" -BaselineFile .\scripts\ci.baseline.txt
      mkdir $(System.ArtifactsDirectory)\xml-results
      # WORKAROUND: the x86-windows flavors of these are needed for all cross-compilation, but they are not auto-installed.
      # Install them so the CI succeeds:
      if ( "${{ parameters.triplet }}" -notmatch "x86-windows" -and "${{ parameters.triplet }}" -notmatch "x64-windows" ) {
          .\vcpkg.exe install protobuf:x86-windows boost-build:x86-windows sqlite3:x86-windows @commonArgs
      }

      .\vcpkg.exe ci ${{ parameters.triplet }} --x-xunit=`"$(System.ArtifactsDirectory)\xml-results\${{ parameters.triplet }}.xml`" --exclude=$skipList @commonArgs
    displayName: '** Test Modified Ports **'
  - task: PowerShell@2
    displayName: 'Analyze results and prepare test logs'
    inputs:
      failOnStderr: true
      filePath: 'scripts/azure-pipelines/analyze-test-results.ps1'
      arguments: '-baselineFile .\scripts\ci.baseline.txt -logDir "$(System.ArtifactsDirectory)\xml-results" -failurelogDir "W:\fail" -outputDir "$(Build.ArtifactStagingDirectory)" -errorOnRegression -triplets "${{ parameters.triplet }}"'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ${{ parameters.triplet }} port build failure logs'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\failureLogs'
      ArtifactName: '${{ parameters.triplet }} port build failure logs'
    condition: failed()
